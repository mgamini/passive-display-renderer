AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Passive Display Renderer

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
# Globals:
#   Function:
#     Timeout: 3
#     Tracing: Active
#   Api:
#     TracingEnabled: True

Globals:
  Api:
    BinaryMediaTypes:
      - image~1png
      - text~1html
      - text~1json

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
  S3SecretsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  SnapshotFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/snapshot/
      Handler: snapshot.handler
      Runtime: nodejs16.x
      Timeout: 15
      MemorySize: 4096
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:764866452798:layer:chrome-aws-lambda:31"
        # I will not be maintaining support for the following layer,
        # and recommend you upload your own.
        - !Sub "arn:aws:lambda:us-east-1:433779689425:layer:pdr-node-modules:1"
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
          S3_SECRETS_BUCKET: !Ref S3SecretsBucket
          S3_SECRETS_KEY: "secrets.json"
          DISPLAY_HEIGHT: "825px"
          DISPLAY_WIDTH: "1200px"
          DAY_COUNT: 4
          TIME_ZONE: "America/New_York"
          TIME_LOCALE: "en-US"
          TEMPLATE: "template.pug"
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3Bucket
        - S3ReadPolicy:
            BucketName: !Ref S3SecretsBucket

      Events:
        SnapshotEvent:
          Type: Schedule
          Properties:
            Schedule: rate(6 hours)

  SnapshotAPIGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: prod
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "Access-Control-Allow-Origin"
          - "Content-Type"
          - "X-Requested-With"
        AllowMethods:
          - GET
          - POST
          - OPTIONS

  # SnapshotAPIGateway:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     StageName: Prod
  #     BinaryMediaTypes:
  #       - image~1png
  #     DefinitionBody:
  #       swagger: "2.0"
  #       basePath: "/Prod"
  #       schemes:
  #         - "https"
  #       paths:
  #         /get/{id}:
  #           get:
  #             produces:
  #               - "image/png"
  #             responses: {}
  #             x-amazon-apigateway-integration:
  #               uri: !Ref SnapshotAPI # api-gateway-arn using Fn::Join
  #               # responses: {}
  #               # passthroughBehavior: "when_no_match"
  #               httpMethod: "GET"
  #               contentHandling: "CONVERT_TO_BINARY"
  #               type: "aws_proxy"
  SnapshotAPIGenerate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/
      Handler: generate.handler
      Runtime: nodejs16.x
      Environment:
        Variables:
          SNAPSHOT_FUNCTION: !Ref SnapshotFunction
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref SnapshotFunction
      Events:
        EchoJsonHttp:
          Type: HttpApi
          Properties:
            Path: /generate
            Method: POST
            ApiId: !Ref SnapshotAPIGateway

  SnapshotAPIRenders:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/
      Handler: renders.handler
      Runtime: nodejs16.x
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3Bucket
      Events:
        EchoJsonHttp:
          Type: HttpApi
          Properties:
            Path: /renders
            Method: GET
            ApiId: !Ref SnapshotAPIGateway

  SnapshotAPIGet:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/
      Handler: get.handler
      Runtime: nodejs16.x
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3Bucket
      Events:
        EchoJsonHttp:
          Type: HttpApi
          Properties:
            Path: /get/{id}
            Method: GET
            ApiId: !Ref SnapshotAPIGateway

Outputs:
  ConsumerFunction:
    Description: SnapshotFunction function name
    Value: !Ref SnapshotFunction
  GenerateImageApi:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${SnapshotAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"
# Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   GenerateImageApi:
#     Description: "API Gateway endpoint URL for Prod stage for Generate Image function"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#   GenerateImageFunction:
#     Description: "Generate Image Lambda Function ARN"
#     Value: !GetAtt GenerateImageFunction.Arn
#   GenerateImageFunctionIamRole:
#     Description: "Implicit IAM Role created for Generate Image function"
#     Value: !GetAtt GenerateImageFunctionRole.Arn
